diff --git a/lib/python/util/hg.py b/lib/python/util/hg.py
index 7839d02..c76c8ef 100644
--- a/lib/python/util/hg.py
+++ b/lib/python/util/hg.py
@@ -1,5 +1,7 @@
 """Functions for interacting with hg"""
-import os, re, subprocess
+import os
+import re
+import subprocess
 from urlparse import urlsplit
 from ConfigParser import RawConfigParser
 
@@ -9,13 +11,16 @@ from util.retry import retry
 import logging
 log = logging.getLogger(__name__)
 
+
 class DefaultShareBase:
     pass
 DefaultShareBase = DefaultShareBase()
 
+
 class HgUtilError(Exception):
     pass
 
+
 def _make_absolute(repo):
     if repo.startswith("file://"):
         path = repo[len("file://"):]
@@ -24,7 +29,8 @@ def _make_absolute(repo):
         repo = os.path.abspath(repo)
     return repo
 
-def make_hg_url(hgHost, repoPath, protocol='http', revision=None,
+
+def make_hg_url(hgHost, repoPath, protocol='https', revision=None,
                 filename=None):
     """construct a valid hg url from a base hg url (hg.mozilla.org),
     repoPath, revision and possible filename"""
@@ -39,29 +45,45 @@ def make_hg_url(hgHost, repoPath, protocol='http', revision=None,
         assert revision
         return '/'.join([p.strip('/') for p in [repo, 'raw-file', revision, filename]])
 
+
 def get_repo_name(repo):
     return repo.rstrip('/').split('/')[-1]
 
+
 def get_repo_path(repo):
-     repo = _make_absolute(repo)
-     if repo.startswith("/"):
-         return repo.lstrip("/")
-     else:
-         return urlsplit(repo).path.lstrip("/")
+    repo = _make_absolute(repo)
+    if repo.startswith("/"):
+        return repo.lstrip("/")
+    else:
+        return urlsplit(repo).path.lstrip("/")
+
 
 def get_revision(path):
     """Returns which revision directory `path` currently has checked out."""
     return get_output(['hg', 'parent', '--template', '{node|short}'], cwd=path)
 
+
 def get_branch(path):
     return get_output(['hg', 'branch'], cwd=path).strip()
 
+
 def get_branches(path):
     branches = []
     for line in get_output(['hg', 'branches', '-c'], cwd=path).splitlines():
         branches.append(line.split()[0])
     return branches
 
+
+def is_hg_cset(rev):
+    """Retruns True if passed revision represents a valid HG revision
+    (long or short(er) 40 bit hex)"""
+    try:
+        int(rev, 16)
+        return True
+    except (TypeError, ValueError):
+        return False
+
+
 def hg_ver():
     """Returns the current version of hg, as a tuple of
     (major, minor, build)"""
@@ -77,6 +99,17 @@ def hg_ver():
     log.debug("Running hg version %s", ver)
     return ver
 
+
+def purge(dest):
+    """Purge the repository of all untracked and ignored files."""
+    try:
+        run_cmd(['hg', '--config', 'extensions.purge=', 'purge',
+                 '-a', '--all', dest], cwd=dest)
+    except subprocess.CalledProcessError, e:
+        log.debug('purge failed: %s' % e)
+        raise
+
+
 def update(dest, branch=None, revision=None):
     """Updates working copy `dest` to `branch` or `revision`.  If neither is
     set then the working copy will be updated to the latest revision on the
@@ -98,8 +131,9 @@ def update(dest, branch=None, revision=None):
         run_cmd(cmd, cwd=dest)
     return get_revision(dest)
 
+
 def clone(repo, dest, branch=None, revision=None, update_dest=True,
-        clone_by_rev=False, mirrors=None, bundles=None):
+          clone_by_rev=False, mirrors=None, bundles=None):
     """Clones hg repo and places it at `dest`, replacing whatever else is
     there.  The working copy will be empty.
 
@@ -125,15 +159,20 @@ def clone(repo, dest, branch=None, revision=None, update_dest=True,
 
     if bundles:
         log.info("Attempting to initialize clone with bundles")
-        init(dest)
-
         for bundle in bundles:
+            if os.path.exists(dest):
+                remove_path(dest)
+            init(dest)
             log.info("Trying to use bundle %s", bundle)
             try:
-                unbundle(bundle, dest)
+                if not unbundle(bundle, dest):
+                    remove_path(dest)
+                    continue
+                adjust_paths(dest, default=repo)
                 # Now pull / update
-                return pull(repo, dest, update_dest=update_dest, mirrors=mirrors)
-            except:
+                return pull(repo, dest, update_dest=update_dest,
+                            mirrors=mirrors, revision=revision, branch=branch)
+            except Exception:
                 remove_path(dest)
                 log.exception("Problem unbundling/pulling from %s", bundle)
                 continue
@@ -146,7 +185,7 @@ def clone(repo, dest, branch=None, revision=None, update_dest=True,
             log.info("Cloning from %s", mirror)
             try:
                 retval = clone(mirror, dest, branch, revision,
-                        update_dest=update_dest, clone_by_rev=clone_by_rev)
+                               update_dest=update_dest, clone_by_rev=clone_by_rev)
                 adjust_paths(dest, default=repo)
                 return retval
             except:
@@ -158,8 +197,8 @@ def clone(repo, dest, branch=None, revision=None, update_dest=True,
             # We need to make sure our paths are correct though
             if os.path.exists(os.path.join(dest, '.hg')):
                 adjust_paths(dest, default=repo)
-            return mercurial(repo, dest, branch, revision,
-                    update_dest=update_dest, clone_by_rev=clone_by_rev)
+            return mercurial(repo, dest, branch, revision, autoPurge=True,
+                             update_dest=update_dest, clone_by_rev=clone_by_rev)
 
     cmd = ['hg', 'clone']
     if not update_dest:
@@ -180,6 +219,7 @@ def clone(repo, dest, branch=None, revision=None, update_dest=True,
     if update_dest:
         return update(dest, branch, revision)
 
+
 def common_args(revision=None, branch=None, ssh_username=None, ssh_key=None):
     """Fill in common hg arguments, encapsulating logic checks that depend on
        mercurial versions and provided arguments"""
@@ -198,12 +238,10 @@ def common_args(revision=None, branch=None, ssh_username=None, ssh_key=None):
             args.extend(['-b', branch])
     return args
 
+
 def pull(repo, dest, update_dest=True, mirrors=None, **kwargs):
     """Pulls changes from hg repo and places it in `dest`.
 
-    If `revision` is set, only the specified revision and its ancestors will
-    be pulled.
-
     If `update_dest` is set, then `dest` will be updated to `revision` if
     set, otherwise to `branch`, otherwise to the head of default.
 
@@ -213,8 +251,7 @@ def pull(repo, dest, update_dest=True, mirrors=None, **kwargs):
     if mirrors:
         for mirror in mirrors:
             try:
-                retval = pull(mirror, dest, update_dest=update_dest, **kwargs)
-                return retval
+                return pull(mirror, dest, update_dest=update_dest, **kwargs)
             except:
                 log.exception("Problem pulling from mirror %s", mirror)
                 continue
@@ -224,7 +261,16 @@ def pull(repo, dest, update_dest=True, mirrors=None, **kwargs):
     # Convert repo to an absolute path if it's a local repository
     repo = _make_absolute(repo)
     cmd = ['hg', 'pull']
-    cmd.extend(common_args(**kwargs))
+    # Don't pass -r to "hg pull", except when it's a valid HG revision.
+    # Pulling using tag names is dangerous: it uses the local .hgtags, so if
+    # the tag has moved on the remote side you won't pull the new revision the
+    # remote tag refers to.
+    pull_kwargs = kwargs.copy()
+    if 'revision' in pull_kwargs and \
+       not is_hg_cset(pull_kwargs['revision']):
+        del pull_kwargs['revision']
+
+    cmd.extend(common_args(**pull_kwargs))
 
     cmd.append(repo)
     run_cmd(cmd, cwd=dest)
@@ -241,6 +287,7 @@ def pull(repo, dest, update_dest=True, mirrors=None, **kwargs):
 # Defines the places of attributes in the tuples returned by `out'
 REVISION, BRANCH = 0, 1
 
+
 def out(src, remote, **kwargs):
     """Check for outgoing changesets present in a repo"""
     cmd = ['hg', '-q', 'out', '--template', '{node} {branches}\n']
@@ -266,17 +313,21 @@ def out(src, remote, **kwargs):
                 return []
             raise
 
-def push(src, remote, push_new_branches=True, **kwargs):
+
+def push(src, remote, push_new_branches=True, force=False, **kwargs):
     cmd = ['hg', 'push']
     cmd.extend(common_args(**kwargs))
+    if force:
+        cmd.append('-f')
     if push_new_branches:
         cmd.append('--new-branch')
     cmd.append(remote)
     run_cmd(cmd, cwd=src)
 
+
 def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
               shareBase=DefaultShareBase, allowUnsharedLocalClones=False,
-              clone_by_rev=False, mirrors=None, bundles=None):
+              clone_by_rev=False, mirrors=None, bundles=None, autoPurge=False):
     """Makes sure that `dest` is has `revision` or `branch` checked out from
     `repo`.
 
@@ -302,6 +353,10 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
     if shareBase is DefaultShareBase:
         shareBase = os.environ.get("HG_SHARE_BASE_DIR", None)
 
+    log.info("Reporting hg version in use")
+    cmd = ['hg', '-q', 'version']
+    run_cmd(cmd, cwd='.')
+
     if shareBase:
         # Check that 'hg share' works
         try:
@@ -326,9 +381,8 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
 
         # Make sure that our default path is correct
         if hgpath != _make_absolute(repo):
-            log.info("hg path isn't correct (%s should be %s); clobbering", hgpath, _make_absolute(repo))
-            # we need to clobber both the shared checkout and the dest,
-            # since hgrc needs to be in both places
+            log.info("hg path isn't correct (%s should be %s); clobbering",
+                     hgpath, _make_absolute(repo))
             remove_path(dest)
 
     # If the working directory already exists and isn't using share we update
@@ -340,9 +394,11 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
             remove_path(dest)
         elif not os.path.exists(os.path.join(dest, ".hg", "sharedpath")):
             try:
+                if autoPurge:
+                    purge(dest)
                 return pull(repo, dest, update_dest=update_dest, branch=branch,
-                        revision=revision,
-                        mirrors=mirrors)
+                            revision=revision,
+                            mirrors=mirrors)
             except subprocess.CalledProcessError:
                 log.warning("Error pulling changes into %s from %s; clobbering", dest, repo)
                 log.debug("Exception:", exc_info=True)
@@ -360,7 +416,8 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
 
             # Make sure that our default path is correct
             if hgpath != _make_absolute(repo):
-                log.info("hg path isn't correct (%s should be %s); clobbering", hgpath, _make_absolute(repo))
+                log.info("hg path isn't correct (%s should be %s); clobbering",
+                         hgpath, _make_absolute(repo))
                 # we need to clobber both the shared checkout and the dest,
                 # since hgrc needs to be in both places
                 remove_path(sharedRepo)
@@ -368,20 +425,23 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
 
         if os.path.exists(dest_sharedPath):
             # Make sure that the sharedpath points to sharedRepo
-            dest_sharedPath_data = os.path.normpath(open(dest_sharedPath).read())
+            dest_sharedPath_data = os.path.normpath(
+                open(dest_sharedPath).read())
             norm_sharedRepo = os.path.normpath(os.path.join(sharedRepo, '.hg'))
             if dest_sharedPath_data != norm_sharedRepo:
                 # Clobber!
-                log.info("We're currently shared from %s, but are being requested to pull from %s (%s); clobbering", dest_sharedPath_data, repo, norm_sharedRepo)
+                log.info("We're currently shared from %s, but are being requested to pull from %s (%s); clobbering",
+                         dest_sharedPath_data, repo, norm_sharedRepo)
                 remove_path(dest)
 
-
         try:
             log.info("Updating shared repo")
             mercurial(repo, sharedRepo, branch=branch, revision=revision,
-                update_dest=False, shareBase=None, clone_by_rev=clone_by_rev,
-                mirrors=mirrors, bundles=bundles)
+                      update_dest=False, shareBase=None, clone_by_rev=clone_by_rev,
+                      mirrors=mirrors, bundles=bundles, autoPurge=False)
             if os.path.exists(dest):
+                if autoPurge:
+                    purge(dest)
                 return update(dest, branch=branch, revision=revision)
 
             try:
@@ -401,10 +461,11 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
                 # This lets us use hardlinks for the local clone if the OS
                 # supports it
                 clone(sharedRepo, dest, update_dest=False,
-                        mirrors=mirrors, bundles=bundles)
+                      mirrors=mirrors, bundles=bundles)
                 return update(dest, branch=branch, revision=revision)
         except subprocess.CalledProcessError:
-            log.warning("Error updating %s from sharedRepo (%s): ", dest, sharedRepo)
+            log.warning(
+                "Error updating %s from sharedRepo (%s): ", dest, sharedRepo)
             log.debug("Exception:", exc_info=True)
             remove_path(dest)
     # end if shareBase
@@ -414,11 +475,12 @@ def mercurial(repo, dest, branch=None, revision=None, update_dest=True,
 
     # Share isn't available or has failed, clone directly from the source
     return clone(repo, dest, branch, revision,
-            update_dest=update_dest, mirrors=mirrors,
-            bundles=bundles, clone_by_rev=clone_by_rev)
+                 update_dest=update_dest, mirrors=mirrors,
+                 bundles=bundles, clone_by_rev=clone_by_rev)
+
 
 def apply_and_push(localrepo, remote, changer, max_attempts=10,
-                   ssh_username=None, ssh_key=None):
+                   ssh_username=None, ssh_key=None, force=False):
     """This function calls `changer' to make changes to the repo, and tries
        its hardest to get them to the origin repo. `changer' must be a
        callable object that receives two arguments: the directory of the local
@@ -427,7 +489,8 @@ def apply_and_push(localrepo, remote, changer, max_attempts=10,
     assert callable(changer)
     branch = get_branch(localrepo)
     changer(localrepo, 1)
-    for n in range(1, max_attempts+1):
+    for n in range(1, max_attempts + 1):
+        new_revs = []
         try:
             new_revs = out(src=localrepo, remote=remote,
                            ssh_username=ssh_username,
@@ -435,27 +498,31 @@ def apply_and_push(localrepo, remote, changer, max_attempts=10,
             if len(new_revs) < 1:
                 raise HgUtilError("No revs to push")
             push(src=localrepo, remote=remote, ssh_username=ssh_username,
-                 ssh_key=ssh_key)
+                 ssh_key=ssh_key, force=force)
             return
         except subprocess.CalledProcessError, e:
             log.debug("Hit error when trying to push: %s" % str(e))
             if n == max_attempts:
                 log.debug("Tried %d times, giving up" % max_attempts)
                 for r in reversed(new_revs):
-                    run_cmd(['hg', 'strip', '-n', r[REVISION]], cwd=localrepo)
+                    run_cmd(['hg', '--config', 'extensions.mq=', 'strip', '-n',
+                             r[REVISION]], cwd=localrepo)
                 raise HgUtilError("Failed to push")
             pull(remote, localrepo, update_dest=False,
                  ssh_username=ssh_username, ssh_key=ssh_key)
             # After we successfully rebase or strip away heads the push is
             # is attempted again at the start of the loop
             try:
-                run_cmd(['hg', 'rebase'], cwd=localrepo)
+                run_cmd(['hg', '--config', 'ui.merge=internal:merge',
+                         'rebase'], cwd=localrepo)
             except subprocess.CalledProcessError, e:
                 log.debug("Failed to rebase: %s" % str(e))
                 update(localrepo, branch=branch)
                 for r in reversed(new_revs):
-                    run_cmd(['hg', 'strip', '-n', r[REVISION]], cwd=localrepo)
-                changer(localrepo, n+1)
+                    run_cmd(['hg', '--config', 'extensions.mq=', 'strip', '-n',
+                             r[REVISION]], cwd=localrepo)
+                changer(localrepo, n + 1)
+
 
 def share(source, dest, branch=None, revision=None):
     """Creates a new working directory in "dest" that shares history with
@@ -463,12 +530,15 @@ def share(source, dest, branch=None, revision=None):
     run_cmd(['hg', 'share', '-U', source, dest])
     return update(dest, branch=branch, revision=revision)
 
+
 def cleanOutgoingRevs(reponame, remote, username, sshKey):
     outgoingRevs = retry(out, kwargs=dict(src=reponame, remote=remote,
                                           ssh_username=username,
                                           ssh_key=sshKey))
     for r in reversed(outgoingRevs):
-        run_cmd(['hg', 'strip', '-n', r[REVISION]], cwd=reponame)
+        run_cmd(['hg', '--config', 'extensions.mq=', 'strip', '-n',
+                 r[REVISION]], cwd=reponame)
+
 
 def path(src, name='default'):
     """Returns the remote path associated with "name" """
@@ -477,15 +547,22 @@ def path(src, name='default'):
     except subprocess.CalledProcessError:
         return None
 
+
 def init(dest):
     """Initializes an empty repo in `dest`"""
     run_cmd(['hg', 'init', dest])
 
+
 def unbundle(bundle, dest):
     """Unbundles the bundle located at `bundle` into `dest`.
 
     `bundle` can be a local file or remote url."""
-    run_cmd(['hg', 'unbundle', bundle], cwd=dest)
+    try:
+        get_output(['hg', 'unbundle', bundle], cwd=dest, include_stderr=True)
+        return True
+    except subprocess.CalledProcessError:
+        return False
+
 
 def adjust_paths(dest, **paths):
     """Adjusts paths in `dest`/.hg/hgrc so that names in `paths` are set to
@@ -509,3 +586,26 @@ def adjust_paths(dest, **paths):
 
     if changed:
         config.write(open(hgrc, 'w'))
+
+
+def commit(dest, msg, user=None):
+    cmd = ['hg', 'commit', '-m', msg]
+    if user:
+        cmd.extend(['-u', user])
+    run_cmd(cmd, cwd=dest)
+    return get_revision(dest)
+
+
+def tag(dest, tags, user=None, msg=None, rev=None, force=None):
+    cmd = ['hg', 'tag']
+    if user:
+        cmd.extend(['-u', user])
+    if msg:
+        cmd.extend(['-m', msg])
+    if rev:
+        cmd.extend(['-r', rev])
+    if force:
+        cmd.append('-f')
+    cmd.extend(tags)
+    run_cmd(cmd, cwd=dest)
+    return get_revision(dest)
