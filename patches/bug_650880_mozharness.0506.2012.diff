diff --git a/configs/unittests/linux_unittest.py b/configs/unittests/linux_unittest.py
new file mode 100644
index 0000000..dd8f45e
--- /dev/null
+++ b/configs/unittests/linux_unittest.py
@@ -0,0 +1,92 @@
+#### OS Specifics ####
+APP_NAME_DIR = "firefox"
+BINARY_PATH = "firefox-bin"
+INSTALLER_PATH = "installer.tar.bz2"
+XPCSHELL_NAME = "xpcshell"
+ADJUST_SCREEN_RESOLUTION = False
+DISABLE_SCREEN_SAVER = True
+#####
+
+config = {
+
+        "app_name_dir" : APP_NAME_DIR,
+        "installer_path" : INSTALLER_PATH,
+        "binary_path" : APP_NAME_DIR + "/" + BINARY_PATH,
+
+        "repos": [{
+            "repo": "http://hg.mozilla.org/build/tools",
+            "revision": "default",
+            "dest": "tools"
+        }],
+
+
+        #global unittest options
+        "global_test_options" : 
+        {
+            "app_name" : "--appname={binary_path}",
+            "util_path" : "--utility-path=tests/bin",
+            "extra_prof_path" : "--extra-profile-file=tests/bin/plugins",
+            "symbols_path" : "--symbols-path={symbols_path}"
+        },
+
+        "run_file_names" : {
+            "mochitest" : "runtests.py",
+            "reftest" : "runreftest.py",
+            "xpcshell" : "runxpcshelltests.py"
+        },
+
+        #global mochitest options
+        "global_mochitest_options" : [
+            "--certificate-path=tests/certs", "--autorun",
+            "--close-when-done", "--console-level=INFO",
+        ],
+
+
+        #local mochi suites
+        "all_mochitest_suites" :
+        {
+            "plain1" : ["--total-chunks=5", "--this-chunk=1", "--chunk-by-dir=4"],
+            "plain2" : ["--total-chunks=5", "--this-chunk=2", "--chunk-by-dir=4"],
+            "plain3" : ["--total-chunks=5", "--this-chunk=3", "--chunk-by-dir=4"],
+            "plain4" : ["--total-chunks=5", "--this-chunk=4", "--chunk-by-dir=4"],
+            "plain5" : ["--total-chunks=5", "--this-chunk=5", "--chunk-by-dir=4"],
+            "chrome" : ["--chrome"],
+            "browser-chrome" : ["--browser-chrome"],
+            "a11y" : ["--a11y"],
+            "plugins" : ["--setpref='dom.ipc.plugins.enabled=false'",
+                "--test-path='modules/plugin/test'"]
+        },
+
+        #local reftests suites
+        "all_reftest_suites" :
+        {
+            "reftest" : ["tests/reftest/tests/layout/reftests/reftest.list"],
+            "crashtest" : ["tests/reftest/tests/layout/reftests/crashtests.list"],
+            "jsreftest" : ["--extra-profile-file=tests/jsreftest/tests/user.js", "tests/jsreftests/jstests.list"],
+        },
+
+        "xpcshell_name" : XPCSHELL_NAME,
+
+        "all_xpcshell_suites" : {
+            "xpcshell" : ["--manifest=tests/xpcshell/tests/all-test-dirs.list",
+                    "application/firefox/" + XPCSHELL_NAME]
+        },
+
+        "preflight_run_cmd_suites" : [
+                {
+                    "name" : "disable_screen_saver",
+                    "cmd" : ["xset", "s", "reset"],
+                    "enabled" : DISABLE_SCREEN_SAVER
+                },
+                {
+                    "name" : "adjust_screen_resolution",
+                    "cmd" : [
+                        "bash", "-c", "screenresolution", "get", "&&", "screenresolution",
+                        "list", "&&", "system_profiler", "SPDisplaysDataType"
+                    ],
+                    "enabled" : ADJUST_SCREEN_RESOLUTION
+                },
+        ],
+
+}
+
diff --git a/configs/unittests/mac_unittest.py b/configs/unittests/mac_unittest.py
new file mode 100644
index 0000000..d8da1e2
--- /dev/null
+++ b/configs/unittests/mac_unittest.py
@@ -0,0 +1,91 @@
+#### OS Specifics ####
+APP_NAME_DIR = "FirefoxNightly.app"
+BINARY_PATH = "Contents/MacOS/firefox-bin"
+INSTALLER_PATH = "installer.dmg"
+XPCSHELL_NAME = 'xpcshell'
+ADJUST_SCREEN_RESOLUTION = True
+DISABLE_SCREEN_SAVER = False
+#####
+
+config = {
+
+        "app_name_dir" : APP_NAME_DIR,
+        "installer_path" : INSTALLER_PATH,
+        "binary_path" : APP_NAME_DIR + "/" + BINARY_PATH,
+
+        "repos": [{
+            "repo": "http://hg.mozilla.org/build/tools",
+            "revision": "default",
+            "dest": "tools"
+        }],
+
+
+        #global unittest options
+        "global_test_options" : 
+        {
+            "app_name" : "--appname={binary_path}",
+            "util_path" : "--utility-path=tests/bin",
+            "extra_prof_path" : "--extra-profile-file=tests/bin/plugins",
+            "symbols_path" : "--symbols-path={symbols_path}"
+        },
+
+        "run_file_names" : {
+            "mochitest" : "runtests.py",
+            "reftest" : "runreftest.py",
+            "xpcshell" : "runxpcshelltests.py"
+        },
+
+        #global mochitest options
+        "global_mochitest_options" : [
+            "--certificate-path=tests/certs", "--autorun",
+            "--close-when-done", "--console-level=INFO",
+        ],
+
+
+        #local mochi suites
+        "all_mochitest_suites" :
+        {
+            "plain1" : ["--total-chunks=5", "--this-chunk=1", "--chunk-by-dir=4"],
+            "plain2" : ["--total-chunks=5", "--this-chunk=2", "--chunk-by-dir=4"],
+            "plain3" : ["--total-chunks=5", "--this-chunk=3", "--chunk-by-dir=4"],
+            "plain4" : ["--total-chunks=5", "--this-chunk=4", "--chunk-by-dir=4"],
+            "plain5" : ["--total-chunks=5", "--this-chunk=5", "--chunk-by-dir=4"],
+            "chrome" : ["--chrome"],
+            "browser-chrome" : ["--browser-chrome"],
+            "a11y" : ["--a11y"],
+            "plugins" : ["--setpref='dom.ipc.plugins.enabled=false'",
+                "--test-path='modules/plugin/test'"]
+        },
+
+        #local reftests suites
+        "all_reftest_suites" :
+        {
+            "reftest" : ["tests/reftest/tests/layout/reftests/reftest.list"],
+            "crashtest" : ["tests/reftest/tests/layout/reftests/crashtests.list"],
+            "jsreftest" : ["--extra-profile-file=tests/jsreftest/tests/user.js", "tests/jsreftests/jstests.list"],
+        },
+
+        "xpcshell_name" : XPCSHELL_NAME,
+
+        "all_xpcshell_suites" : {
+            "xpcshell" : ["--manifest=tests/xpcshell/tests/all-test-dirs.list",
+                    "application/firefox/" + XPCSHELL_NAME]
+        },
+
+        "preflight_run_cmd_suites" : [
+                {
+                    "name" : "disable_screen_saver",
+                    "cmd" : ["xset", "s", "reset"],
+                    "enabled" : DISABLE_SCREEN_SAVER
+                },
+                {
+                    "name" : "adjust_screen_resolution",
+                    "cmd" : [
+                        "bash", "-c", "screenresolution", "get", "&&", "screenresolution",
+                        "list", "&&", "system_profiler", "SPDisplaysDataType"
+                    ],
+                    "enabled" : ADJUST_SCREEN_RESOLUTION
+                },
+        ],
+
+}
diff --git a/configs/unittests/win_unittest.py b/configs/unittests/win_unittest.py
new file mode 100644
index 0000000..4ef987e
--- /dev/null
+++ b/configs/unittests/win_unittest.py
@@ -0,0 +1,92 @@
+#### OS Specifics ####
+APP_NAME_DIR = "firefox"
+BINARY_PATH = "firefox.exe"
+INSTALLER_PATH = "installer.tar.bz2"
+XPCSHELL_NAME = 'xpcshell.exe'
+ADJUST_SCREEN_RESOLUTION = False
+DISABLE_SCREEN_SAVER = False
+#####
+
+config = {
+
+        "app_name_dir" : APP_NAME_DIR,
+        "installer_path" : INSTALLER_PATH,
+        "binary_path" : APP_NAME_DIR + "/" + BINARY_PATH,
+
+        "repos": [{
+            "repo": "http://hg.mozilla.org/build/tools",
+            "revision": "default",
+            "dest": "tools"
+        }],
+
+
+        #global unittest options
+        "global_test_options" : 
+        {
+            "app_name" : "--appname={binary_path}",
+            "util_path" : "--utility-path=tests/bin",
+            "extra_prof_path" : "--extra-profile-file=tests/bin/plugins",
+            "symbols_path" : "--symbols-path={symbols_path}"
+        },
+
+        "run_file_names" : {
+            "mochitest" : "runtests.py",
+            "reftest" : "runreftest.py",
+            "xpcshell" : "runxpcshelltests.py"
+        },
+
+        #global mochitest options
+        "global_mochitest_options" : [
+            "--certificate-path=tests/certs", "--autorun",
+            "--close-when-done", "--console-level=INFO",
+        ],
+
+
+        #local mochi suites
+        "all_mochitest_suites" :
+        {
+            "plain1" : ["--total-chunks=5", "--this-chunk=1", "--chunk-by-dir=4"],
+            "plain2" : ["--total-chunks=5", "--this-chunk=2", "--chunk-by-dir=4"],
+            "plain3" : ["--total-chunks=5", "--this-chunk=3", "--chunk-by-dir=4"],
+            "plain4" : ["--total-chunks=5", "--this-chunk=4", "--chunk-by-dir=4"],
+            "plain5" : ["--total-chunks=5", "--this-chunk=5", "--chunk-by-dir=4"],
+            "chrome" : ["--chrome"],
+            "browser-chrome" : ["--browser-chrome"],
+            "a11y" : ["--a11y"],
+            "plugins" : ["--setpref='dom.ipc.plugins.enabled=false'",
+                "--test-path='modules/plugin/test'"]
+        },
+
+        #local reftests suites
+        "all_reftest_suites" :
+        {
+            "reftest" : ["tests/reftest/tests/layout/reftests/reftest.list"],
+            "crashtest" : ["tests/reftest/tests/layout/reftests/crashtests.list"],
+            "jsreftest" : ["--extra-profile-file=tests/jsreftest/tests/user.js", "tests/jsreftests/jstests.list"],
+        },
+
+        "xpcshell_name" : XPCSHELL_NAME,
+
+        "all_xpcshell_suites" : {
+            "xpcshell" : ["--manifest=tests/xpcshell/tests/all-test-dirs.list",
+                    "application/firefox/" + XPCSHELL_NAME]
+        },
+
+        "preflight_run_cmd_suites" : [
+                {
+                    "name" : "disable_screen_saver",
+                    "cmd" : ["xset", "s", "reset"],
+                    "enabled" : DISABLE_SCREEN_SAVER
+                },
+                {
+                    "name" : "adjust_screen_resolution",
+                    "cmd" : [
+                        "bash", "-c", "screenresolution", "get", "&&", "screenresolution",
+                        "list", "&&", "system_profiler", "SPDisplaysDataType"
+                    ],
+                    "enabled" : ADJUST_SCREEN_RESOLUTION
+                },
+        ],
+
+}
+
diff --git a/scripts/desktop_unittest.py b/scripts/desktop_unittest.py
new file mode 100755
index 0000000..701eec4
--- /dev/null
+++ b/scripts/desktop_unittest.py
@@ -0,0 +1,409 @@
+#!/usr/bin/env python
+# ***** BEGIN LICENSE BLOCK *****
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+# ***** END LICENSE BLOCK *****
+"""desktop_unittest.py
+
+The goal of this is to extract the unittestng from buildbot's factory.py
+for any Mozilla desktop applictation(my goal
+and subject to change upon review)
+
+author: Jordan Lund
+"""
+
+import os, sys, shutil, copy
+
+# load modules from parent dir
+sys.path.insert(1, os.path.dirname(sys.path[0]))
+
+from mozharness.base.errors import MakefileErrorList
+from mozharness.base.vcs.vcsbase import MercurialScript
+from mozharness.mozilla.testing.testbase import TestingMixin, testing_config_options
+from mozharness.mozilla.buildbot import TBPL_SUCCESS, TBPL_FAILURE, TBPL_WARNING
+from mozharness.base.log import INFO, ERROR
+
+SUITE_CATEGORIES = ['mochitest', 'reftest', 'xpcshell']
+
+# DesktopUnittest {{{1
+class DesktopUnittest(TestingMixin, MercurialScript):
+
+    config_options = [
+        [['--mochitest-suite',],
+            {
+                "action" : "append",
+                "dest" : "specified_mochitest_suites",
+                "type": "string",
+                "help": """Specify which mochi suite to run.
+                Suites are defined in the config file.
+                Examples: 'all', 'plain1', 'plain5', 'chrome', or 'a11y'"""
+            }
+        ],
+
+        [['--reftest-suite',],
+            {
+                "action" : "append",
+                "dest" : "specified_reftest_suites",
+                "type": "string",
+                "help": """Specify which reftest suite to run.
+                Suites are defined in the config file.
+                Examples: 'all', 'crashplan', or 'jsreftest'"""
+            }
+        ],
+        [['--xpcshell-suite',],
+            {
+                "action" : "append",
+                "dest" : "specified_xpcshell_suites",
+                "type": "string",
+                "help": """Specify which xpcshell suite to run.
+                Suites are defined in the config file.
+                Examples: 'xpcshell'"""
+            }
+        ],
+        [['--run-all-suites',],
+            {
+                "action": "store_true",
+                "dest": "run_all_suites",
+                "default": False,
+                "help": """This will run all suites that are specified
+                        in the config file. You do not need to specify any other suites.
+                        Beware, this may take a while ;)""",
+                        }
+            ],
+        [['--disable-preflight-run-commands',],
+            {
+                "action": "store_true",
+                "dest": "preflight_run_commands_disabled",
+                "default": False,
+                "help": """This will disable any run commands that are specified
+in the config file under: preflight_run_cmd_suites""",
+            }
+            ],
+    ] + copy.deepcopy(testing_config_options)
+
+    virtualenv_modules = [
+     'simplejson',
+     {'mozlog': os.path.join('tests', 'mozbase', 'mozlog')},
+     {'mozinfo': os.path.join('tests', 'mozbase', 'mozinfo')},
+     {'mozhttpd': os.path.join('tests', 'mozbase', 'mozhttpd')},
+     {'mozinstall': os.path.join('tests', 'mozbase', 'mozinstall')},
+     {'manifestdestiny': os.path.join('tests', 'mozbase', 'manifestdestiny')},
+     {'mozprofile': os.path.join('tests', 'mozbase', 'mozprofile')},
+     {'mozprocess': os.path.join('tests', 'mozbase', 'mozprocess')},
+     {'mozrunner': os.path.join('tests', 'mozbase', 'mozrunner')},
+     {'peptest': os.path.join('tests', 'peptest')},
+    ]
+
+    def __init__(self, require_config_file=True):
+
+        MercurialScript.__init__(self,
+                config_options=self.config_options,
+                all_actions=[
+                    'clobber',
+                    'read-buildbot-config',
+                    'download-and-extract',
+                    'pull',
+                    'create-virtualenv',
+                    'install',
+                    'run-tests',
+                    ],
+                require_config_file=require_config_file,
+                config={'virtualenv_modules': self.virtualenv_modules}
+                )
+
+        c = self.config
+        self.global_test_options = []
+        self.abs_dirs = None
+
+        self.installer_url = c.get('installer_url')
+        self.test_url = c.get('test_url')
+        self.installer_path = c.get('installer_path')
+        self.binary_path = c.get('binary_path')
+        self.symbols_url = c.get('symbols_url')
+
+    ###### helper methods
+
+    def _pre_config_lock(self, rw_config):
+        c = self.config
+        if not c.get('run_all_suites'):
+            return # configs are valid
+
+        for category in SUITE_CATEGORIES:
+            specific_suites = c.get('specified_{0}_suites'.format(category))
+            if specific_suites:
+                if specific_suites != 'all':
+                    self.fatal("""Config options are not valid.
+                            Please ensure that if the '--run-all-suites' flag was enabled
+                            then do not specify to run only specific suites like '--mochitest-suite browser-chrome'""")
+
+
+    def query_abs_dirs(self):
+        if self.abs_dirs:
+            return self.abs_dirs
+        abs_dirs = super(DesktopUnittest, self).query_abs_dirs()
+
+        c = self.config
+        dirs = {}
+        dirs['abs_app_install_dir'] = os.path.join(abs_dirs['abs_work_dir'], 'application')
+
+        dirs['abs_app_dir'] = os.path.join(dirs['abs_app_install_dir'], c['app_name_dir'])
+        dirs['abs_app_plugins_dir'] = os.path.join(dirs['abs_app_dir'], 'plugins')
+        dirs['abs_app_components_dir'] = os.path.join(dirs['abs_app_dir'], 'components')
+
+        dirs['abs_test_install_dir'] = os.path.join(abs_dirs['abs_work_dir'], 'tests')
+        dirs['abs_test_bin_dir'] = os.path.join(dirs['abs_test_install_dir'], 'bin')
+        dirs['abs_test_bin_plugins_dir'] = os.path.join(dirs['abs_test_bin_dir'], 'plugins')
+        dirs['abs_test_bin_components_dir'] = os.path.join(dirs['abs_test_bin_dir'], 'components')
+
+        dirs['abs_mochitest_dir'] = os.path.join(dirs['abs_test_install_dir'], "mochitest")
+        dirs['abs_reftest_dir'] = os.path.join(dirs['abs_test_install_dir'], "reftest")
+        dirs['abs_xpcshell_dir'] = os.path.join(dirs['abs_test_install_dir'], "xpcshell")
+
+        if os.path.isabs(c['virtualenv_path']):
+            dirs['abs_virtualenv_dir'] = c['virtualenv_path']
+        else:
+            dirs['abs_virtualenv_dir'] = os.path.join(abs_dirs['abs_work_dir'],
+                c['virtualenv_path'])
+
+        abs_dirs.update(dirs)
+
+        self.abs_dirs = abs_dirs
+        return self.abs_dirs
+
+    def _query_symbols_url(self):
+        """query the full symbols URL based upon binary URL"""
+        # may break with name convention changes but is one less 'input' for script
+        if self.symbols_url:
+            return self.symbols_url
+
+        installer_url = self.config.get('installer_url')
+        symbols_url = None
+        self.info("finding symbols_url based upon self.config['installer_url']")
+        if installer_url:
+            for ext in ['.zip', '.dmg', '.tar.bz2']:
+                if ext in installer_url:
+                    symbols_url = installer_url.replace(ext, '.crashreporter-symbols.zip')
+            if not symbols_url:
+                self.fatal("installer_url was found but symbols_url could not be determined")
+        else:
+            self.fatal("installer_url was not found in self.config")
+
+        self.info("setting symbols_url as {0}".format(symbols_url))
+        self.symbols_url = symbols_url
+        return self.symbols_url
+
+    def _query_global_options(self, **kwargs):
+        """return a list of options for all tests"""
+        if self.global_test_options:
+            return self.global_test_options
+
+        if self.binary_path:
+            if kwargs:
+                global_test_options  = []
+                for key in kwargs.keys():
+                    kwargs[key] = kwargs[key].format(
+                            binary_path=self.binary_path,
+                            symbols_path=self._query_symbols_url())
+                    global_test_options.append(kwargs[key])
+                self.global_test_options = global_test_options
+
+                return self.global_test_options
+            else:
+                self.fatal("""No global test options could be found in self.config
+                        Please add them to your config file.""")
+        else:
+            self.fatal("""the 'appname' or 'binary_path' could not be determined.
+            This should be something like '/root/path/with/build/application/firefox/firefox-bin'
+            If you are running this script without the 'install' action (where binary_path is set),
+            Please make sure you are either:
+                    (1) specifing it in the config file under binary_path
+                    (2) specifing it on command line with the '--binary-path' flag""")
+
+
+    def _query_specified_suites(self, category):
+
+        # logic goes: if at least one '--{category}-suite' was given in the script
+        # then run only that(those) given suite(s). Elif, if no suites were
+        # specified and the --run-all-suites flag was given,
+        # run all {category} suites. Anything else, run no suites.
+
+        c = self.config
+        all_suites = c.get('all_{0}_suites'.format(category))
+        specified_suites = c.get('specified_{0}_suites'.format(category))
+
+        suites = None
+        if specified_suites:
+            if 'all' in specified_suites:
+                suites = [value for value in all_suites.values()]
+            else:
+                suites = [all_suites[key] for key in \
+                        all_suites.keys() if key in specified_suites]
+        else:
+            if c.get('run_all_suites'):
+                suites = [value for value in all_suites.values()]
+
+        return suites
+
+    def copy_tree(self, src, dest, overwrite='nothing', log_level=INFO,
+            error_level=ERROR):
+        """an implementation of shutil.copytree however it allows for
+        dest to exist and implements differen't overwrite levels.
+        overwrite uses:
+        'nothing' will keep all(any) existing files in destination tree
+        'corresponding' will only overwrite destination paths that have
+                   the same path names relative to the root of src and
+                   destination tree
+        'all' will replace the whole destination tree(clobber) if it exists"""
+
+        # TODO ask what is more appropriate then 'corresponding'
+        # ie: 'reciprocal', 'correlative', 'coequal',  'akin', 'parallel'
+
+        try:
+            if overwrite == 'all':
+                self.rmtree(dest)
+                self.info('copying tree: %s to %s' % (src, dest))
+                shutil.copytree(src, dest)
+            elif overwrite == 'nothing' or overwrite == 'corresponding':
+                files = os.listdir(src)
+                for f in files:
+                    abs_src_f = os.path.join(src, f)
+                    abs_dest_f = os.path.join(dest, f)
+                    if not os.path.exists(abs_dest_f):
+                        if os.path.isdir(abs_src_f):
+                            self.mkdir_p(abs_dest_f)
+                            self.copy_tree(abs_src_f, abs_dest_f, overwrite='all')
+                        else:
+                            self.copyfile(abs_src_f, abs_dest_f)
+                    elif overwrite == 'nothing': # and destination path exists
+                        if os.path.isdir(abs_src_f) and os.path.isdir(abs_dest_f):
+                            self.copy_tree(abs_src_f, abs_dest_f, overwrite='nothing')
+                        else:
+                            self.debug('ignoring path: %s as destination: \
+                                    %s exists' % (abs_src_f, abs_dest_f))
+                    else: # overwrite == 'corresponding' and destination path exists
+                        self.debug('overwriting: %s with: %s' % (abs_dest_f, abs_src_f))
+                        self.rmtree(abs_dest_f)
+
+                        if os.path.isdir(abs_src_f):
+                            self.mkdir_p(abs_dest_f)
+                            self.copy_tree(abs_src_f, abs_dest_f, overwrite='corresponding')
+                        else:
+                            self.copyfile(abs_src_f, abs_dest_f)
+            else:
+                self.fatal("%s is not a valid argument for param overwrite" % (overwrite))
+        except (IOError, shutil.Error):
+            self.dump_exception("There was an error while copying %s to %s!" % (src, dest),
+                    level=error_level)
+            return -1
+
+    # Actions {{{2
+
+    # clobber defined in BaseScript and deletes mozharness/build if exists
+    # read_buildbot_config is in BuildbotMixin.
+    # postflight_read_buildbot_config is in TestingMixin.
+    # preflight_download_and_extract is in TestingMixin.
+    # download_and_extract is in TestingMixin.
+    # create_virtualenv is in VirtualenvMixin.
+    # preflight_install is in TestingMixin.
+    # install is in TestingMixin.
+
+    def pull(self):
+        dirs = self.query_abs_dirs()
+        c = self.config
+
+        if c.get('repos'):
+            dirs = self.query_abs_dirs()
+            self.vcs_checkout_repos(c['repos'],
+                                    parent_dir=dirs['abs_test_install_dir'])
+
+    def preflight_run_tests(self):
+        """preflight commands for all tests"""
+        c = self.config
+        dirs = self.query_abs_dirs()
+
+        if not c.get('preflight_run_commands_disabled'):
+            for suite in c['preflight_run_cmd_suites']:
+                if suite['enabled']:
+                    self.info("Running pre test command {name} with '{cmd}'".format(
+                        name=suite['name'],
+                        cmd=' '.join(suite['cmd'])))
+                    self.run_command(suite['cmd'],
+                            cwd=dirs['abs_work_dir'],
+                            error_list=MakefileErrorList,
+                            halt_on_failure=True)
+        else:
+            self.warning("""Proceeding without running prerun test commands.
+            These are often OS specific and disabling them may result in spurious test results!""")
+
+    def run_tests(self):
+        c = self.config
+        self._run_category_suites('mochitest', c['global_test_options'],
+                category_options=c['global_mochitest_options'])
+        self._run_category_suites('reftest', c['global_test_options'])
+        self._run_category_suites('xpcshell', c['global_test_options'],
+                preflight_run_method=self.preflight_xpcshell)
+
+    def preflight_xpcshell(self):
+        c = self.config
+        dirs = self.query_abs_dirs()
+
+        self.mkdir_p(dirs['abs_app_plugins_dir'])
+        self.copyfile(os.path.join(dirs['abs_test_bin_dir'], c['xpcshell_name']),
+            os.path.join(dirs['abs_app_dir'], c['xpcshell_name']))
+        self.copy_tree(dirs['abs_test_bin_components_dir'], dirs['abs_app_components_dir'],
+                overwrite='corresponding')
+        self.copy_tree(dirs['abs_test_bin_plugins_dir'], dirs['abs_app_plugins_dir'],
+                overwrite='corresponding')
+
+    def _run_category_suites(self, suite_category, global_options,
+            category_options=None, preflight_run_method=None):
+        """run suite(s) to a specific category"""
+        c = self.config
+        dirs = self.query_abs_dirs()
+        run_file = c['run_file_names'][suite_category]
+        base_cmd = ["python", dirs["abs_%s_dir" % suite_category] + "/" + run_file]
+        global_test_options = self._query_global_options(**global_options)
+
+        if category_options:
+            global_test_options += category_options
+
+        abs_base_cmd = base_cmd + global_test_options
+        suites = self._query_specified_suites(suite_category)
+
+        if suites:
+            if preflight_run_method:
+                preflight_run_method()
+
+            self.info('#### Running %s suites' % suite_category)
+            for num in range(len(suites)):
+                cmd =  abs_base_cmd + suites[num]
+                code = self.run_command(cmd,
+                        cwd=dirs['abs_work_dir'],
+                        error_list=MakefileErrorList)
+
+                tbpl_status = TBPL_SUCCESS
+                level = INFO
+                if code == 0:
+                    status = "success"
+                elif code == 1:
+                    status = "test failures"
+                    tbpl_status = TBPL_WARNING
+                else:
+                    status = "harness failure"
+                    tbpl_status = TBPL_FAILURE
+                    level = ERROR
+                self.add_summary("The %s suite: %s test ran with return code %s: %s" % (suite_category,
+                        suites[num], code, status), level=level)
+
+                # TODO find out when I should be displaying tbpl status. Should
+                # this be done if its a developer running the script?
+                if 'read-buildbot-config' in self.actions:
+                    self.buildbot_status(tbpl_status)
+
+
+
+# main {{{1
+if __name__ == '__main__':
+    desktop_unittest = DesktopUnittest()
+    desktop_unittest.run()
