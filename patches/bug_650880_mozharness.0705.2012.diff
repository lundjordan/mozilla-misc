diff --git a/.hgignore b/.hgignore
index e43713f..738648e 100644
--- a/.hgignore
+++ b/.hgignore
@@ -10,4 +10,6 @@ test.py
 .coverage
 coverage
 htmlcov
-venv
\ No newline at end of file
+venv
+build/
+logs/
diff --git a/configs/unittests/linux_unittest.py b/configs/unittests/linux_unittest.py
new file mode 100644
index 0000000..93f92d8
--- /dev/null
+++ b/configs/unittests/linux_unittest.py
@@ -0,0 +1,97 @@
+#### OS Specifics ####
+APP_NAME_DIR = "firefox"
+BINARY_PATH = "firefox-bin"
+INSTALLER_PATH = "installer.tar.bz2"
+XPCSHELL_NAME = "xpcshell"
+DISABLE_SCREEN_SAVER = True
+ADJUST_MOUSE_AND_SCREEN = False
+#####
+config = {
+    "app_name_dir" : APP_NAME_DIR,
+    "installer_path" : INSTALLER_PATH,
+    "binary_path" : APP_NAME_DIR + "/" + BINARY_PATH,
+    "xpcshell_name" : XPCSHELL_NAME,
+    # TODO find out if I need simple_json_url
+    "buildbot_json_path": "buildprops.json",
+    "simplejson_url": "http://build.mozilla.org/talos/zips/simplejson-2.2.1.tar.gz",
+    "repos": [{
+        "repo": "http://hg.mozilla.org/build/tools",
+        "revision": "default",
+        "dest": "tools"
+    }],
+    "exes": {
+        'python': '/tools/buildbot/bin/python',
+        'virtualenv': ['/tools/buildbot/bin/python', '/tools/misc-python/virtualenv.py'],
+    },
+    "run_file_names" : {
+        "mochitest" : "runtests.py",
+        "reftest" : "runreftest.py",
+        "xpcshell" : "runxpcshelltests.py"
+    },
+    "minimum_tests_zip_dirs" : ["bin/*", "certs/*", "modules/*", "mozbase/*"],
+    "specific_tests_zip_dirs" : {
+        "mochitest" : ["mochitest/*"],
+        "reftest" : ["reftest/*", "jsreftest/*"],
+        "xpcshell" : ["xpcshell/*"]
+        },
+    "reftest_options" : [
+        "--appname=%(binary_path)s", "--utility-path=tests/bin",
+        "--extra-profile-file=tests/bin/plugins","--symbols-path=%(symbols_path)s"
+    ],
+    "mochitest_options" : [
+        "--appname=%(binary_path)s", "--utility-path=tests/bin",
+        "--extra-profile-file=tests/bin/plugins","--symbols-path=%(symbols_path)s",
+        "--certificate-path=tests/certs", "--autorun", "--close-when-done",
+        "--console-level=INFO"
+    ],
+    "xpcshell_options" : [
+        "--symbols-path=%(symbols_path)s"
+    ],
+    #local mochi suites
+    "all_mochitest_suites" : {
+        "plain1" : ["--total-chunks=5", "--this-chunk=1", "--chunk-by-dir=4"],
+        "plain2" : ["--total-chunks=5", "--this-chunk=2", "--chunk-by-dir=4"],
+        "plain3" : ["--total-chunks=5", "--this-chunk=3", "--chunk-by-dir=4"],
+        "plain4" : ["--total-chunks=5", "--this-chunk=4", "--chunk-by-dir=4"],
+        "plain5" : ["--total-chunks=5", "--this-chunk=5", "--chunk-by-dir=4"],
+        "chrome" : ["--chrome"],
+        "browser-chrome" : ["--browser-chrome"],
+        "a11y" : ["--a11y"],
+        "plugins" : ['--setpref=dom.ipc.plugins.enabled=false',
+                '--setpref=dom.ipc.plugins.enabled.x86_64=false',
+                '--ipcplugins']
+    },
+    #local reftests suites
+    "all_reftest_suites" : {
+        "reftest" : ["tests/reftest/tests/layout/reftests/reftest.list"],
+        "crashtest" : ["tests/reftest/tests/layout/reftests/crashtests.list"],
+        "jsreftest" : ["--extra-profile-file=tests/jsreftest/tests/user.js", "tests/jsreftests/jstests.list"],
+    },
+    "all_xpcshell_suites" : {
+        "xpcshell" : ["--manifest=tests/xpcshell/tests/all-test-dirs.list",
+            "application/" + APP_NAME_DIR + "/" + XPCSHELL_NAME]
+    },
+    "preflight_run_cmd_suites" : [
+        {
+            "name" : "disable_screen_saver",
+            "cmd" : ["xset", "s", "reset"],
+            "halt_on_failure" : False,
+            "architectures" : ["32bit", "64bit"],
+            "enabled" : DISABLE_SCREEN_SAVER
+        },
+        {
+            # TODO add error list to this (global errors from buildbot)
+            "name" : "run mouse & screen adjustment script",
+            "cmd" : [
+                # when configs are consolidated this python path will only show
+                # for windows.
+                "python", "tools/scripts/support/mouse_and_screen_resolution.py",
+                "--configuration-url",
+                "http://hg.mozilla.org/%(branch)s/raw-file/%(revision)s/" + \
+                        "testing/machine-configuration.json"],
+            "architectures" : ["32bit"],
+            "halt_on_failure" : True,
+            "enabled" : ADJUST_MOUSE_AND_SCREEN
+        },
+    ],
+}
diff --git a/configs/unittests/mac_unittest.py b/configs/unittests/mac_unittest.py
new file mode 100644
index 0000000..667a615
--- /dev/null
+++ b/configs/unittests/mac_unittest.py
@@ -0,0 +1,96 @@
+#### OS Specifics ####
+APP_NAME_DIR = "FirefoxNightly.app/Contents/MacOS"
+BINARY_PATH = "firefox-bin"
+INSTALLER_PATH = "installer.dmg"
+XPCSHELL_NAME = 'xpcshell'
+DISABLE_SCREEN_SAVER = False
+ADJUST_MOUSE_AND_SCREEN = False
+#####
+config = {
+    "app_name_dir" : APP_NAME_DIR,
+    "installer_path" : INSTALLER_PATH,
+    "binary_path" : APP_NAME_DIR + "/" + BINARY_PATH,
+    "xpcshell_name" : XPCSHELL_NAME,
+    # TODO find out if I need simple_json_url
+    "buildbot_json_path": "buildprops.json",
+    "simplejson_url": "http://build.mozilla.org/talos/zips/simplejson-2.2.1.tar.gz",
+    "repos": [{
+        "repo": "http://hg.mozilla.org/build/tools",
+        "revision": "default",
+        "dest": "tools"
+    }],
+    "exes": {
+        'python': '/tools/buildbot/bin/python',
+        'virtualenv': ['/tools/buildbot/bin/python', '/tools/misc-python/virtualenv.py'],
+    },
+    "run_file_names" : {
+        "mochitest" : "runtests.py",
+        "reftest" : "runreftest.py",
+        "xpcshell" : "runxpcshelltests.py"
+    },
+    "minimum_tests_zip_dirs" : ["bin/*", "certs/*", "modules/*", "mozbase/*"],
+    "specific_tests_zip_dirs" : {
+        "mochitest" : ["mochitest/*"],
+        "reftest" : ["reftest/*", "jsreftest/*"],
+        "xpcshell" : ["xpcshell/*"]
+        },
+    "reftest_options" : [
+        "--appname=%(binary_path)s", "--utility-path=tests/bin",
+        "--extra-profile-file=tests/bin/plugins","--symbols-path=%(symbols_path)s"
+    ],
+    "mochitest_options" : [
+        "--appname=%(binary_path)s", "--utility-path=tests/bin",
+        "--extra-profile-file=tests/bin/plugins","--symbols-path=%(symbols_path)s",
+        "--certificate-path=tests/certs", "--autorun", "--close-when-done",
+        "--console-level=INFO"
+    ],
+    "xpcshell_options" : [
+        "--symbols-path=%(symbols_path)s"
+    ],
+    #local mochi suites
+    "all_mochitest_suites" : {
+        "plain1" : ["--total-chunks=5", "--this-chunk=1", "--chunk-by-dir=4"],
+        "plain2" : ["--total-chunks=5", "--this-chunk=2", "--chunk-by-dir=4"],
+        "plain3" : ["--total-chunks=5", "--this-chunk=3", "--chunk-by-dir=4"],
+        "plain4" : ["--total-chunks=5", "--this-chunk=4", "--chunk-by-dir=4"],
+        "plain5" : ["--total-chunks=5", "--this-chunk=5", "--chunk-by-dir=4"],
+        "chrome" : ["--chrome"],
+        "browser-chrome" : ["--browser-chrome"],
+        "plugins" : ['--setpref=dom.ipc.plugins.enabled=false',
+                '--setpref=dom.ipc.plugins.enabled.x86_64=false',
+                '--ipcplugins']
+    },
+    #local reftests suites
+    "all_reftest_suites" : {
+        "reftest" : ["tests/reftest/tests/layout/reftests/reftest.list"],
+        "crashtest" : ["tests/reftest/tests/layout/reftests/crashtests.list"],
+        "jsreftest" : ["--extra-profile-file=tests/jsreftest/tests/user.js", "tests/jsreftests/jstests.list"],
+    },
+    "all_xpcshell_suites" : {
+        "xpcshell" : ["--manifest=tests/xpcshell/tests/all-test-dirs.list",
+            "application/" + APP_NAME_DIR + "/" + XPCSHELL_NAME]
+    },
+    "preflight_run_cmd_suites" : [
+        {
+            "name" : "disable_screen_saver",
+            "cmd" : ["xset", "s", "reset"],
+            "architectures" : ["32bit", "64bit"],
+            "halt_on_failure" : False,
+            "enabled" : DISABLE_SCREEN_SAVER
+        },
+        {
+            #TODO add error list to this (global errors from buildbot)
+            "name" : "run mouse & screen adjustment script",
+            "cmd" : [
+                # when configs are consolidated this python path will only show
+                # for windows.
+                "python", "tools/scripts/support/mouse_and_screen_resolution.py",
+                "--configuration-url",
+                "http://hg.mozilla.org/%(branch)s/raw-file/%(revision)s/" + \
+                        "testing/machine-configuration.json"],
+            "architectures" : ["32bit"],
+            "halt_on_failure" : True,
+            "enabled" : ADJUST_MOUSE_AND_SCREEN
+        },
+    ],
+}
diff --git a/configs/unittests/win_unittest.py b/configs/unittests/win_unittest.py
new file mode 100644
index 0000000..37ca0ac
--- /dev/null
+++ b/configs/unittests/win_unittest.py
@@ -0,0 +1,105 @@
+#### OS Specifics ####
+APP_NAME_DIR = "firefox"
+BINARY_PATH = "firefox.exe"
+INSTALLER_PATH = "installer.tar.bz2"
+XPCSHELL_NAME = 'xpcshell.exe'
+DISABLE_SCREEN_SAVER = False
+ADJUST_MOUSE_AND_SCREEN = True
+#####
+config = {
+    "app_name_dir" : APP_NAME_DIR,
+    "installer_path" : INSTALLER_PATH,
+    "binary_path" : APP_NAME_DIR + "/" + BINARY_PATH,
+    "xpcshell_name" : XPCSHELL_NAME,
+    # TODO find out if I need simple_json_url
+    "buildbot_json_path": "buildprops.json",
+    "simplejson_url": "http://build.mozilla.org/talos/zips/simplejson-2.2.1.tar.gz",
+    "virtualenv_path": 'c:/talos-slave/test/build/venv',
+    "virtualenv_python_dll": 'c:/mozilla-build/python25/python25.dll',
+    "distribute_url": "http://build.mozilla.org/talos/zips/distribute-0.6.24.tar.gz",
+    "pip_url": "http://build.mozilla.org/talos/zips/pip-1.0.2.tar.gz",
+    "repos": [{
+        "repo": "http://hg.mozilla.org/build/tools",
+        "revision": "default",
+        "dest": "tools"
+    }],
+    "exes": {
+        'python': 'c:/mozilla-build/python25/python',
+        'virtualenv': ['c:/mozilla-build/python25/python', 'c:/mozilla-build/buildbotve/virtualenv.py'],
+        'hg': 'c:/mozilla-build/hg/hg',
+    },
+    "run_file_names" : {
+        "mochitest" : "runtests.py",
+        "reftest" : "runreftest.py",
+        "xpcshell" : "runxpcshelltests.py"
+    },
+    "minimum_tests_zip_dirs" : ["bin/*", "certs/*", "modules/*", "mozbase/*"],
+    "specific_tests_zip_dirs" : {
+        "mochitest" : ["mochitest/*"],
+        "reftest" : ["reftest/*", "jsreftest/*"],
+        "xpcshell" : ["xpcshell/*"]
+        },
+    "reftest_options" : [
+        "--appname=%(binary_path)s", "--utility-path=tests/bin",
+        "--extra-profile-file=tests/bin/plugins","--symbols-path=%(symbols_path)s"
+    ],
+    "mochitest_options" : [
+        "--appname=%(binary_path)s", "--utility-path=tests/bin",
+        "--extra-profile-file=tests/bin/plugins","--symbols-path=%(symbols_path)s",
+        "--certificate-path=tests/certs", "--autorun", "--close-when-done",
+        "--console-level=INFO"
+    ],
+    "xpcshell_options" : [
+        "--symbols-path=%(symbols_path)s"
+    ],
+    #local mochi suites
+    "all_mochitest_suites" :
+    {
+        "plain1" : ["--total-chunks=5", "--this-chunk=1", "--chunk-by-dir=4"],
+        "plain2" : ["--total-chunks=5", "--this-chunk=2", "--chunk-by-dir=4"],
+        "plain3" : ["--total-chunks=5", "--this-chunk=3", "--chunk-by-dir=4"],
+        "plain4" : ["--total-chunks=5", "--this-chunk=4", "--chunk-by-dir=4"],
+        "plain5" : ["--total-chunks=5", "--this-chunk=5", "--chunk-by-dir=4"],
+        "chrome" : ["--chrome"],
+        "browser-chrome" : ["--browser-chrome"],
+        "a11y" : ["--a11y"],
+        "plugins" : ['--setpref=dom.ipc.plugins.enabled=false',
+                '--setpref=dom.ipc.plugins.enabled.x86_64=false',
+                '--ipcplugins']
+    },
+    #local reftests suites
+    "all_reftest_suites" :
+    {
+        "reftest" : ["tests/reftest/tests/layout/reftests/reftest.list"],
+        "crashtest" : ["tests/reftest/tests/layout/reftests/crashtests.list"],
+        "jsreftest" : ["--extra-profile-file=tests/jsreftest/tests/user.js", "tests/jsreftests/jstests.list"],
+    },
+    "all_xpcshell_suites" : {
+        "xpcshell" : ["--manifest=tests/xpcshell/tests/all-test-dirs.list",
+            "application/" + APP_NAME_DIR + "/" + XPCSHELL_NAME]
+    },
+    "preflight_run_cmd_suites" : [
+        {
+            "name" : "disable_screen_saver",
+            "cmd" : ["xset", "s", "reset"],
+            "architectures" : ["32bit", "64bit"],
+            "halt_on_failure" : False,
+            "enabled" : DISABLE_SCREEN_SAVER
+        },
+        {
+            # TODO add error list to this (global errors from buildbot)
+            "name" : "run mouse & screen adjustment script",
+            "cmd" : [
+                # when configs are consolidated this python path will only show
+                # for windows.
+                "python", "tools/scripts/support/mouse_and_screen_resolution.py",
+                "--configuration-url",
+                "http://hg.mozilla.org/%(branch)s/raw-file/%(revision)s/" + \
+                        "testing/machine-configuration.json"],
+            "architectures" : ["32bit"],
+            "halt_on_failure" : True,
+            "enabled" : ADJUST_MOUSE_AND_SCREEN
+        },
+    ],
+}
+
diff --git a/mozharness/base/script.py b/mozharness/base/script.py
index d5af1ad..53b29db 100755
--- a/mozharness/base/script.py
+++ b/mozharness/base/script.py
@@ -156,7 +156,7 @@ class OSMixin(object):
                      exit_code=exit_code)
             return
         except urllib2.URLError, e:
-            self.log("URL Error: %s" % (url), level=error_level,
+            self.log("URL Error: %s %s" % (e.code, url), level=error_level,
                      exit_code=exit_code)
             return
         return file_name
@@ -189,6 +189,59 @@ class OSMixin(object):
                                     level=error_level)
                 return -1
 
+    def copytree(self, src, dest, overwrite='nothing', log_level=INFO,
+            error_level=ERROR):
+        """an implementation of shutil.copytree however it allows for
+        dest to exist and implements differen't overwrite levels.
+        overwrite uses:
+        'nothing' will keep all(any) existing files in destination tree
+        'update' will only overwrite destination paths that have
+                   the same path names relative to the root of the src and
+                   destination tree
+        'all' will replace the whole destination tree(clobber) if it exists"""
+
+        # TODO ask what is more appropriate then 'update'
+        # ie: 'reciprocal', 'correlative', 'coequal',  'akin', 'corresponding'
+
+        self.info('copying tree: %s to %s' % (src, dest))
+        try:
+            if overwrite == 'all':
+                self.rmtree(dest)
+                shutil.copytree(src, dest)
+            elif overwrite == 'nothing' or overwrite == 'update':
+                files = os.listdir(src)
+                for f in files:
+                    abs_src_f = os.path.join(src, f)
+                    abs_dest_f = os.path.join(dest, f)
+                    if not os.path.exists(abs_dest_f):
+                        if os.path.isdir(abs_src_f):
+                            self.mkdir_p(abs_dest_f)
+                            self.copytree(abs_src_f, abs_dest_f, overwrite='all')
+                        else:
+                            shutil.copy2(abs_src_f, abs_dest_f)
+                    elif overwrite == 'nothing': # and destination path exists
+                        if os.path.isdir(abs_src_f) and os.path.isdir(abs_dest_f):
+                            self.copytree(abs_src_f, abs_dest_f, overwrite='nothing')
+                        else:
+                            self.debug('ignoring path: %s as destination: \
+                                    %s exists' % (abs_src_f, abs_dest_f))
+                    else: # overwrite == 'update' and destination path exists
+                        self.debug('overwriting: %s with: %s' % (abs_dest_f, abs_src_f))
+                        self.rmtree(abs_dest_f)
+
+                        if os.path.isdir(abs_src_f):
+                            self.mkdir_p(abs_dest_f)
+                            self.copytree(abs_src_f, abs_dest_f, overwrite='update')
+                        else:
+                            shutil.copy2(abs_src_f, abs_dest_f)
+            else:
+                self.fatal("%s is not a valid argument for param overwrite" % (overwrite))
+        except (IOError, shutil.Error):
+            self.dump_exception("There was an error while copying %s to %s!" % (src, dest),
+                    level=error_level)
+            return -1
+
+
     def write_to_file(self, file_path, contents, verbose=True,
                       open_mode='w', create_parent_dir=False,
                       error_level=ERROR):
@@ -391,8 +444,15 @@ class ShellMixin(object):
         shell = True
         if isinstance(command, list):
             shell = False
-        p = subprocess.Popen(command, shell=shell, stdout=subprocess.PIPE,
+        try:
+            p = subprocess.Popen(command, shell=shell, stdout=subprocess.PIPE,
                              cwd=cwd, stderr=subprocess.STDOUT, env=env)
+        except OSError, e:
+            if halt_on_failure:
+                level = FATAL
+            self.log('caught OS error %s: %s while running %s' % (e.errno,
+                    e.strerror, command))
+            return -1
         parser = OutputParser(config=self.config, log_obj=self.log_obj,
                               error_list=error_list)
         loop = True
diff --git a/mozharness/mozilla/testing/testbase.py b/mozharness/mozilla/testing/testbase.py
index 232f158..daeb1a0 100755
--- a/mozharness/mozilla/testing/testbase.py
+++ b/mozharness/mozilla/testing/testbase.py
@@ -130,15 +130,17 @@ You can set this by:
                                     error_level=FATAL)
         self.test_zip_path = os.path.realpath(source)
 
-    def _extract_test_zip(self):
+    def _extract_test_zip(self, target_unzip_dirs=None):
         dirs = self.query_abs_dirs()
         unzip = self.query_exe("unzip")
         test_install_dir = dirs.get('abs_test_install_dir',
                                     os.path.join(dirs['abs_work_dir'], 'tests'))
         self.mkdir_p(test_install_dir)
+        unzip_cmd = [unzip, self.test_zip_path]
+        if target_unzip_dirs:
+            unzip_cmd.extend(target_unzip_dirs)
         # TODO error_list
-        self.run_command([unzip, self.test_zip_path],
-                         cwd=test_install_dir)
+        self.run_command(unzip_cmd, cwd=test_install_dir)
 
     def _download_installer(self):
         file_name = None
@@ -153,7 +155,7 @@ You can set this by:
 
     def download_and_extract(self):
         """
-        Create virtualenv and install dependencies
+        download and extract test zip / download installer
         """
         if self.test_url:
             self._download_test_zip()
diff --git a/scripts/desktop_unittest.py b/scripts/desktop_unittest.py
new file mode 100755
index 0000000..abdedfd
--- /dev/null
+++ b/scripts/desktop_unittest.py
@@ -0,0 +1,399 @@
+#!/usr/bin/env python
+# ***** BEGIN LICENSE BLOCK *****
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this file,
+# You can obtain one at http://mozilla.org/MPL/2.0/.
+# ***** END LICENSE BLOCK *****
+"""desktop_unittest.py
+
+The goal of this is to extract the unittestng from buildbot's factory.py
+
+author: Jordan Lund
+"""
+
+import os, sys, copy, platform
+import shutil, re
+
+# load modules from parent dir
+sys.path.insert(1, os.path.dirname(sys.path[0]))
+from mozharness.base.errors import PythonErrorList, BaseErrorList
+from mozharness.base.vcs.vcsbase import MercurialScript
+from mozharness.mozilla.testing.testbase import TestingMixin, testing_config_options
+from mozharness.mozilla.buildbot import TBPL_SUCCESS, TBPL_FAILURE, TBPL_WARNING
+from mozharness.base.log import INFO, ERROR, WARNING
+
+
+SUITE_CATEGORIES = ['mochitest', 'reftest', 'xpcshell']
+
+# DesktopUnittest {{{1
+class DesktopUnittest(TestingMixin, MercurialScript):
+
+
+    config_options = [
+        [['--mochitest-suite',],
+            {
+                "action" : "append",
+                "dest" : "specified_mochitest_suites",
+                "type": "string",
+                "help": """Specify which mochi suite to run.
+                Suites are defined in the config file.
+                Examples: 'all', 'plain1', 'plain5', 'chrome', or 'a11y'"""
+            }
+        ],
+        [['--reftest-suite',],
+            {
+                "action" : "append",
+                "dest" : "specified_reftest_suites",
+                "type": "string",
+                "help": """Specify which reftest suite to run.
+                Suites are defined in the config file.
+                Examples: 'all', 'crashplan', or 'jsreftest'"""
+            }
+        ],
+        [['--xpcshell-suite',],
+            {
+                "action" : "append",
+                "dest" : "specified_xpcshell_suites",
+                "type": "string",
+                "help": """Specify which xpcshell suite to run.
+                Suites are defined in the config file.
+                Examples: 'xpcshell'"""
+            }
+        ],
+        [['--run-all-suites',],
+            {
+                "action": "store_true",
+                "dest": "run_all_suites",
+                "default": False,
+                "help": """This will run all suites that are specified
+                        in the config file. You do not need to specify any other suites.
+                        Beware, this may take a while ;)""",
+                        }
+            ],
+        [['--disable-preflight-run-commands',],
+            {
+                "action": "store_true",
+                "dest": "preflight_run_commands_disabled",
+                "default": False,
+                "help": """This will disable any run commands that are specified
+in the config file under: preflight_run_cmd_suites""",
+            }
+        ]
+    ] + copy.deepcopy(testing_config_options)
+
+    error_list = [
+            {'regex': re.compile(r'''^TEST-UNEXPECTED-FAIL'''), 'level': WARNING,
+                'explanation' : "this unittest unexpectingly failed. This is a harness error"},
+        {'regex': re.compile(r'''^\tFailed: [^0]'''), 'level': WARNING,
+               'explanation' : "1 or more unittests failed"},
+        {'regex': re.compile(r'''^\d+ INFO Failed: [^0]'''), 'level': WARNING,
+                'explanation' : "1 or more unittests failed"},
+    ] + PythonErrorList
+
+    virtualenv_modules = [
+     'simplejson',
+     {'mozlog': os.path.join('tests', 'mozbase', 'mozlog')},
+     {'mozinfo': os.path.join('tests', 'mozbase', 'mozinfo')},
+     {'mozhttpd': os.path.join('tests', 'mozbase', 'mozhttpd')},
+     {'mozinstall': os.path.join('tests', 'mozbase', 'mozinstall')},
+     {'manifestdestiny': os.path.join('tests', 'mozbase', 'manifestdestiny')},
+     {'mozprofile': os.path.join('tests', 'mozbase', 'mozprofile')},
+     {'mozprocess': os.path.join('tests', 'mozbase', 'mozprocess')},
+     {'mozrunner': os.path.join('tests', 'mozbase', 'mozrunner')},
+    ]
+
+    def __init__(self, require_config_file=True):
+
+        MercurialScript.__init__(self,
+                config_options=self.config_options,
+                all_actions=[
+                    'clobber',
+                    'read-buildbot-config',
+                    'download-and-extract',
+                    'pull',
+                    'create-virtualenv',
+                    'install',
+                    'run-tests',
+                    ],
+                require_config_file=require_config_file,
+                config={'virtualenv_modules': self.virtualenv_modules,
+                        'require_test_zip': True,})
+
+        c = self.config
+        self.global_test_options = []
+        self.abs_dirs = None
+
+        self.installer_url = c.get('installer_url')
+        self.test_url = c.get('test_url')
+        self.installer_path = c.get('installer_path')
+        self.binary_path = c.get('binary_path')
+        self.symbols_url = c.get('symbols_url')
+
+    ###### helper methods
+
+    def _pre_config_lock(self, rw_config):
+        c = self.config
+        if not c.get('run_all_suites'):
+            return # configs are valid
+
+        for category in SUITE_CATEGORIES:
+            specific_suites = c.get('specified_%s_suites' % (category))
+            if specific_suites:
+                if specific_suites != 'all':
+                    self.fatal("""Config options are not valid.
+Please ensure that if the '--run-all-suites' flag was enabled
+then do not specify to run only specific suites like '--mochitest-suite browser-chrome'""")
+
+
+    def query_abs_dirs(self):
+        if self.abs_dirs:
+            return self.abs_dirs
+        abs_dirs = super(DesktopUnittest, self).query_abs_dirs()
+
+        c = self.config
+        dirs = {}
+        dirs['abs_app_install_dir'] = os.path.join(abs_dirs['abs_work_dir'], 'application')
+
+        dirs['abs_app_dir'] = os.path.join(dirs['abs_app_install_dir'], c['app_name_dir'])
+        dirs['abs_app_plugins_dir'] = os.path.join(dirs['abs_app_dir'], 'plugins')
+        dirs['abs_app_components_dir'] = os.path.join(dirs['abs_app_dir'], 'components')
+
+        dirs['abs_test_install_dir'] = os.path.join(abs_dirs['abs_work_dir'], 'tests')
+        dirs['abs_test_bin_dir'] = os.path.join(dirs['abs_test_install_dir'], 'bin')
+        dirs['abs_test_bin_plugins_dir'] = os.path.join(dirs['abs_test_bin_dir'],
+                'plugins')
+        dirs['abs_test_bin_components_dir'] = os.path.join(dirs['abs_test_bin_dir'],
+                'components')
+
+        dirs['abs_mochitest_dir'] = os.path.join(dirs['abs_test_install_dir'], "mochitest")
+        dirs['abs_reftest_dir'] = os.path.join(dirs['abs_test_install_dir'], "reftest")
+        dirs['abs_xpcshell_dir'] = os.path.join(dirs['abs_test_install_dir'], "xpcshell")
+
+        if os.path.isabs(c['virtualenv_path']):
+            dirs['abs_virtualenv_dir'] = c['virtualenv_path']
+        else:
+            dirs['abs_virtualenv_dir'] = os.path.join(abs_dirs['abs_work_dir'],
+                c['virtualenv_path'])
+
+        abs_dirs.update(dirs)
+
+        self.abs_dirs = abs_dirs
+        return self.abs_dirs
+
+    def _query_symbols_url(self):
+        """query the full symbols URL based upon binary URL"""
+        # may break with name convention changes but is one less 'input' for script
+        if self.symbols_url:
+            return self.symbols_url
+
+        symbols_url = None
+        self.info("finding symbols_url based upon self.installer_url")
+        if self.installer_url:
+            for ext in ['.zip', '.dmg', '.tar.bz2']:
+                if ext in self.installer_url:
+                    symbols_url = self.installer_url.replace(
+                            ext, '.crashreporter-symbols.zip')
+            if not symbols_url:
+                self.fatal("self.installer_url was found but symbols_url could \
+                        not be determined")
+        else:
+            self.fatal("self.installer_url was not found in self.config") 
+        self.info("setting symbols_url as %s" % (symbols_url))
+        self.symbols_url = symbols_url
+        return self.symbols_url
+
+    def _query_abs_base_cmd(self, suite_category):
+        if self.binary_path:
+            c = self.config
+            dirs = self.query_abs_dirs()
+            options = []
+            run_file = c['run_file_names'][suite_category]
+            base_cmd = [self.query_python_path('python')]
+            # TODO in buildbot only xpcshell is run with the '-u' (force stdin)
+            # flag? should all unittests be run with this in mozharness?
+            if suite_category == 'xpcshell':
+                base_cmd.append('-u')
+            base_cmd.append(dirs["abs_%s_dir" % suite_category] + "/" + run_file)
+            str_format_values = {
+                'binary_path' : self.binary_path,
+                'symbols_path' : self._query_symbols_url()
+            }
+            if self.config['%s_options' % suite_category]:
+                for option in self.config['%s_options' % suite_category]:
+                    options.append(option % str_format_values)
+                abs_base_cmd = base_cmd + options
+                return abs_base_cmd
+            else:
+                self.warning("""Suite options for %s could not be determined.
+If you meant to have options for this suite, please make sure they are specified
+in your config under %s_options""" % suite_category, suite_category)
+        else:
+            self.fatal("""the 'appname' or 'binary_path' could not be determined.
+            This should be something like '/root/path/with/build/application/firefox/firefox-bin'
+            If you are running this script without the 'install' action (where binary_path is set),
+            Please make sure you are either:
+                    (1) specifying it in the config file under binary_path
+                    (2) specifying it on command line with the '--binary-path' flag""")
+
+
+    def _query_specified_suites(self, category):
+
+        # logic goes: if at least one '--{category}-suite' was given in the script
+        # then run only that(those) given suite(s). Elif, if no suites were
+        # specified and the --run-all-suites flag was given,
+        # run all {category} suites. Anything else, run no suites.
+
+        c = self.config
+        all_suites = c.get('all_%s_suites' % (category))
+        specified_suites = c.get('specified_%s_suites' % (category))
+        suites = None
+
+        if specified_suites:
+            if 'all' in specified_suites:
+                suites = [value for value in all_suites.values()]
+            else:
+                suites = [all_suites[key] for key in \
+                        all_suites.keys() if key in specified_suites]
+        else:
+            if c.get('run_all_suites'):
+                suites = [value for value in all_suites.values()]
+
+        return suites
+
+    # this is a new line
+
+    # Actions {{{2
+
+    # clobber defined in BaseScript and deletes mozharness/build if exists
+    # read_buildbot_config is in BuildbotMixin.
+    # postflight_read_buildbot_config is in TestingMixin.
+    # preflight_download_and_extract is in TestingMixin.
+    # create_virtualenv is in VirtualenvMixin.
+    # preflight_install is in TestingMixin.
+    # install is in TestingMixin.
+
+    def download_and_extract(self):
+        """
+        download and extract test zip / download installer
+        optimizes which subfolders to extract from tests zip
+        """
+        c = self.config
+        unzip_tests_dirs = None
+
+        if c['specific_tests_zip_dirs']:
+            unzip_tests_dirs = c['minimum_tests_zip_dirs']
+            for category in c['specific_tests_zip_dirs'].keys():
+                if c['run_all_suites'] or self._query_specified_suites(category) \
+                        or 'run-tests' not in self.actions:
+                    unzip_tests_dirs.extend(c['specific_tests_zip_dirs'][category])
+
+        if self.test_url:
+            self._download_test_zip()
+            self._extract_test_zip(target_unzip_dirs=unzip_tests_dirs)
+        self._download_installer()
+
+    def pull(self):
+        dirs = self.query_abs_dirs()
+        c = self.config
+
+        if c.get('repos'):
+            dirs = self.query_abs_dirs()
+            self.vcs_checkout_repos(c['repos'],
+                                    parent_dir=dirs['abs_work_dir'])
+
+    def preflight_run_tests(self):
+        """preflight commands for all tests"""
+        c = self.config
+        dirs = self.query_abs_dirs()
+
+        if not c.get('preflight_run_commands_disabled'):
+            for suite in c['preflight_run_cmd_suites']:
+                # XXX platform.architecture() may give incorrect values for some
+                # platforms like mac as excutable files may be universal
+                # files containing multiple architectures
+                # NOTE 'enabled' is only here while we have unconsolidated configs
+                if suite['enabled'] and \
+                        platform.architecture()[0] in suite['architectures']:
+
+                    self.info("Running pre test command %(name)s with '%(cmd)s'" % {
+                        'name' : suite['name'],
+                        'cmd' : ' '.join(suite['cmd'])})
+                    # TODO rather then checking for formatting on every string
+                    # in every preflight enabled cmd: find a better solution!
+                    # maybe I can implement WithProperties in mozharness?
+                    cmd = [x % (self.buildbot_config['properties']) for x in suite['cmd']]
+                    self.run_command(cmd,
+                            cwd=dirs['abs_work_dir'],
+                            error_list=BaseErrorList,
+                            halt_on_failure=suite['halt_on_failure'])
+        else:
+            self.warning("""Proceeding without running prerun test commands.
+These are often OS specific and disabling them may result in spurious test results!""")
+
+    def run_tests(self):
+
+        self._run_category_suites('mochitest')
+        self._run_category_suites('reftest')
+        self._run_category_suites('xpcshell',
+                preflight_run_method=self.preflight_xpcshell)
+
+    def preflight_xpcshell(self):
+        c = self.config
+        dirs = self.query_abs_dirs()
+
+        self.mkdir_p(dirs['abs_app_plugins_dir'])
+        self.info('copying %s to %s' % (os.path.join(dirs['abs_test_bin_dir'],
+            c['xpcshell_name']), os.path.join(dirs['abs_app_dir'], c['xpcshell_name'])))
+        shutil.copy2(os.path.join(dirs['abs_test_bin_dir'], c['xpcshell_name']),
+            os.path.join(dirs['abs_app_dir'], c['xpcshell_name']))
+        self.copytree(dirs['abs_test_bin_components_dir'],
+                dirs['abs_app_components_dir'], overwrite='update')
+        self.copytree(dirs['abs_test_bin_plugins_dir'], dirs['abs_app_plugins_dir'],
+                overwrite='update')
+
+    def _run_category_suites(self, suite_category, preflight_run_method=None):
+        """run suite(s) to a specific category"""
+        dirs = self.query_abs_dirs()
+
+        abs_base_cmd = self._query_abs_base_cmd(suite_category)
+        suites = self._query_specified_suites(suite_category)
+
+        if preflight_run_method:
+            preflight_run_method()
+
+        if suites:
+            self.info('#### Running %s suites' % suite_category)
+            for num in range(len(suites)):
+                cmd =  abs_base_cmd + suites[num]
+                code = self.run_command(cmd,
+                        cwd=dirs['abs_work_dir'],
+                        error_list=self.error_list)
+
+                #### WIP warning colors not implemented
+                tbpl_status = TBPL_SUCCESS
+                level = INFO
+                if code == 0:
+                    status = "success"
+                elif code == 1:
+                    status = "test failures"
+                    tbpl_status = TBPL_WARNING
+                else:
+                    status = "harness failure"
+                    tbpl_status = TBPL_FAILURE
+                    level = ERROR
+                self.add_summary("The %s suite: %s test ran with return code \
+                        %s: %s" % (suite_category, suites[num], code, status),
+                        level=level)
+                ####
+
+                # this if is in here since a developer will not be using
+                # buildbot
+                if 'read-buildbot-config' in self.actions:
+                    self.buildbot_status(tbpl_status)
+        else:
+            self.debug('There were no suites to run for %s' % suite_category)
+
+# main {{{1
+if __name__ == '__main__':
+    desktop_unittest = DesktopUnittest()
+    desktop_unittest.run()
