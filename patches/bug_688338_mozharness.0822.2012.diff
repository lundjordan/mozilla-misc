diff --git a/mozharness/base/log.py b/mozharness/base/log.py
index e21dd5a..bf4a58c 100755
--- a/mozharness/base/log.py
+++ b/mozharness/base/log.py
@@ -12,6 +12,7 @@ TODO:
 """
 
 from datetime import datetime
+from collections import deque
 import logging
 import os
 import sys
@@ -97,6 +98,10 @@ class LogMixin(object):
         self.log(message, level=FATAL, exit_code=exit_code)
 
 
+CONTEXT_WARN_MESSAGE = "Warning: missing context. Current "\
+    "%(type)s buffer size: %(buffer)d, Requested %(type)s context lines:"\
+    " %(context)d. Setting context length to: %(buffer)d"
+
 
 # OutputParser {{{1
 class OutputParser(LogMixin):
@@ -122,22 +127,16 @@ pre-context-line setting in error_list.)
                  log_output=True):
         self.config = config
         self.log_obj = log_obj
-        self.error_list = error_list
+        self.error_list = error_list or []
         self.log_output = log_output
         self.num_errors = 0
-        # TODO context_lines.
-        # Not in use yet, but will be based off error_list.
-        self.context_buffer = []
-        self.num_pre_context_lines = 0
-        self.num_post_context_lines = 0
+        self.buffer_limit = 21  # gives 10 contexts lines on either side
+        self.context_buffer = deque(maxlen=self.buffer_limit)
         # TODO set self.error_level to the worst error level hit
         # (WARNING, ERROR, CRITICAL, FATAL)
         # self.error_level = INFO
 
-    def parse_single_line(self, line):
-        if not line or line.isspace():
-            return
-        line = line.decode("utf-8").rstrip()
+    def parse_single_line(self, line, buffer_index=None):
         for error_check in self.error_list:
             # TODO buffer for context_lines.
             match = False
@@ -148,8 +147,8 @@ pre-context-line setting in error_list.)
                 if error_check['regex'].search(line):
                     match = True
             else:
-                self.warn("error_list: 'substr' and 'regex' not in %s" % \
-                          error_check)
+                self.warning("error_list: 'substr' and 'regex' not in %s" %
+                             error_check)
             if match:
                 level = error_check.get('level', INFO)
                 if self.log_output:
@@ -159,21 +158,124 @@ pre-context-line setting in error_list.)
                     if error_check.get('summary'):
                         self.add_summary(message, level=level)
                     else:
-                        self.log(message, level=level)
+                        if self.use_buffer:
+                            # we don't log anything, just modify the buffer
+                            self.context_buffer[buffer_index] = (message, level)
+                            if error_check.get('context_lines'):
+                                limits = error_check['context_lines']
+                                self.generate_context_lines(buffer_index, level,
+                                                            limits)
+                        else:
+                            self.log(message, level=level)
                 if level in (ERROR, CRITICAL, FATAL):
                     self.num_errors += 1
                 # TODO set self.error_status (or something)
                 # that sets the worst error level hit.
                 break
         else:
-            if self.log_output:
-                self.info(' %s' % line)
+            if self.use_buffer:
+                # leave the line in buffer as is
+                pass
+            else:
+                if self.log_output:
+                    self.info(' %s' % line)
+
+    def _validate_line(self, line):
+        if not line or line.isspace():
+            return None
+        return line.decode("utf-8").rstrip()
 
     def add_lines(self, output):
-        if str(output) == output:
+        self.use_buffer = False
+        # allows us to enable context_buffer by simply adding
+        # 'context_lines' to any error at any point in the future
+        # This allows OutputParser to be optimized for the occasion
+        # but no flags need to be passed to inform OutputParser to
+        # use a buffer
+        for error_check in self.error_list:
+            if error_check.get('context_lines'):
+                self.use_buffer = True
+                break
+        if isinstance(output, basestring):
             output = [output]
-        for line in output:
-            self.parse_single_line(line)
+        if self.use_buffer:
+            for line in output:
+                line = self._validate_line(line)
+                self.append_to_buffer_and_parse(line) if line else None
+            # now empty the remaining lines left in the buffer
+            self.flush_buffer_and_parse()
+        else:
+            # behave normally
+            for line in output:
+                line = self._validate_line(line)
+                self.parse_single_line(line) if line else None
+
+    def append_to_buffer_and_parse(self, line):
+        message_and_level = line, INFO
+        if len(self.context_buffer) == self.buffer_limit:
+            # buffer is full, start parsing middle elem and
+            # then behave like a queue FIFO
+            middle_elem = self.buffer_limit / 2
+            line_to_parse = self.context_buffer[middle_elem][0]
+            self.parse_single_line(line_to_parse, buffer_index=middle_elem)
+            log_message, log_level = self.context_buffer.popleft()
+            self.log(log_message, log_level)
+        # keep adding new lines to the buffer
+        self.context_buffer.append(message_and_level)
+
+    def generate_context_lines(self, target_index, target_level, limits):
+        # check that the requested pre and post context lengths are doable
+        warn_message = ""
+        if limits.get('pre') > target_index:
+            warn_message += CONTEXT_WARN_MESSAGE % {
+                'buffer': target_index,
+                'type': 'pre', 'context': limits['pre']}
+            limits['pre'] = target_index
+        if limits.get('post') >= len(self.context_buffer) - target_index:
+            warn_message += CONTEXT_WARN_MESSAGE % {
+                'buffer': len(self.context_buffer) - target_index - 1,
+                'type': 'post', 'context': limits['post']}
+            limits['post'] = len(self.context_buffer) - target_index - 1
+
+        pre = target_index - limits['pre']
+        post = target_index + limits['post'] + 1
+        context_lines = list(self.context_buffer)[pre:post]
+        for i, message_and_level in enumerate(context_lines):
+            buffer_index = i + pre
+            message, log_level = message_and_level
+            if buffer_index == target_index:
+                message = "$ %s" % message.lstrip()
+                if warn_message:
+                    message += warn_message
+            else:  # context
+                if message.startswith('$'):
+                    continue  # ignore other regex's that want context
+                message = ">  %s" % message
+                log_level = self.worst_level(target_level, log_level)
+            self.context_buffer[buffer_index] = (message, log_level)
+
+    def flush_buffer_and_parse(self):
+        # behave like append_to_buffer_and_parse but continue in a
+        # loop until buffer is empty and always taking the middle
+        # elem of the buffer to maximize remaining context lines
+        while self.context_buffer:
+            middle_elem = len(self.context_buffer) / 2
+            line_to_parse = self.context_buffer[middle_elem][0]
+            self.parse_single_line(line_to_parse, buffer_index=middle_elem)
+            log_message, log_level = self.context_buffer.popleft()
+            self.log(log_message, log_level)
+
+    def worst_level(self, target_level, existing_level, levels=None):
+        """returns either existing_level or target level.
+        This depends on which is closest to levels[0]
+        By default, levels is the list of log levels"""
+        if not levels:
+            levels = [IGNORE, FATAL, CRITICAL, ERROR, WARNING, INFO, DEBUG]
+        if target_level not in levels:
+            self.fatal("'%s' not in %s'." % (target_level, levels))
+        for l in levels:
+            if l in (target_level, existing_level):
+                return l
 
 
 # BaseLogger {{{1
diff --git a/mozharness/base/script.py b/mozharness/base/script.py
index 9c80eb7..696742d 100755
--- a/mozharness/base/script.py
+++ b/mozharness/base/script.py
@@ -407,8 +407,11 @@ class ShellMixin(object):
             if p.poll() is not None:
                 """Avoid losing the final lines of the log?"""
                 loop = False
-            for line in p.stdout:
-                parser.add_lines(line)
+            # TODO make sure this doesn't break anything.
+            # OutputParser.add_lines() loops with a for line in output
+            # already and I think this can do p.stdout (type file)
+            # Changed as buffer needs all output in add_lines
+            parser.add_lines(p.stdout)
         return_level = INFO
         if p.returncode not in success_codes:
             return_level = ERROR
